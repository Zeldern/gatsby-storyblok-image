{"version":3,"file":"index.modern.mjs","sources":["../src/utils/getBasicImageProps.js","../src/defaults.js","../src/utils/helpers.js","../src/utils/buildImageUrl.js","../src/getFixedGatsbyImage.js","../src/getFluidGatsbyImage.js"],"sourcesContent":["const validImageUrlPattern = /^(https?:)?\\/\\/a.storyblok.com\\/f\\/*[0-9]+\\/*[0-9]*x*[0-9]*\\/[A-Za-z0-9]+\\/[\\S]+\\.[a-zA-Z]+/\n\nfunction getBasicImageProps(image) {\n  let url = null\n  let lqip = null\n\n  if (typeof image === 'string') {\n    url = image\n  }\n\n  if (typeof image === 'object') {\n    url = image.image\n    lqip = image.base64 ? image.base64 : null\n  }\n\n  url = validImageUrlPattern.test(url) ? url : null\n\n  if (!url) {\n    return false\n  }\n\n  const storyblokRegex = /^(https?:)?\\/\\/a.storyblok.com\\//\n  let originalPath = url.replace(storyblokRegex, '')\n\n  let [, , dimensions, , filename] = originalPath.split('/')\n  let [width, height] = dimensions.split('x').map((num) => parseInt(num, 10))\n  let [, extension] = filename.split('.')\n\n  let aspectRatio = width / height\n  let metadata = { dimensions: { width, height, aspectRatio }, lqip }\n\n  return {\n    originalPath,\n    extension,\n    metadata\n  }\n}\n\nexport default getBasicImageProps","export const DEFAULT_FIXED_WIDTH = 400\nexport const DEFAULT_FLUID_MAX_WIDTH = 800\nexport const STORYBLOK_BASE_URL = 'https://img2.storyblok.com'\n\nexport const sizeMultipliersFixed = [1, 1.5, 2, 3]\nexport const sizeMultipliersFluid = [0.25, 0.5, 1, 1.5, 2, 3]\n\nexport const defaultOptions = {\n  quality: 100,\n  smartCrop: true,\n  format: null,\n  fill: null,\n  toFormat: null,\n  base64: null,\n  useBase64: true\n}\n\nexport const defaultFluidOptions = {\n  ...defaultOptions,\n  maxWidth: DEFAULT_FLUID_MAX_WIDTH,\n  maxHeight: null\n}\n\nexport const defaultFixedOptions = {\n  ...defaultOptions,\n  width: DEFAULT_FIXED_WIDTH,\n  height: null\n}\n","export function applyFilters(filters) {\n  return filters.reduce((acc, currentFilter, i) => {\n    return `${acc}:${currentFilter}`\n  }, '/filters')\n}\n\nexport function isWebP(url) {\n  const isConverted = url.includes('filters:format(webp)')\n  const isOriginal = /[a-f0-9]+-\\d+x\\d+\\.webp/.test(url)\n  return isConverted || isOriginal\n}\n","import { STORYBLOK_BASE_URL } from '../defaults'\nimport { applyFilters } from './helpers'\n\nfunction buildImageUrl(originalPath, image, rotation) {\n  let { width, height, smartCrop, quality, format, fill } = image\n\n  let [, extension] = originalPath.split('.')\n\n  let url = STORYBLOK_BASE_URL\n\n  if (width && height) {\n    url += `/${width}x${height}`\n  }\n\n  if (smartCrop) {\n    url += `/smart`\n  }\n\n  let filters = [\n    ...[quality && `quality(${quality})`],\n    ...[format && format !== extension && `format(${format})`],\n    ...[fill && `fill(${fill})`]\n  ]\n\n  // remove falsy elements\n  filters = filters.filter(element => Boolean(element) === true)\n\n  if (filters.length > 0) {\n    url += applyFilters(filters)\n  }\n\n  // add original path at the end\n  url += `/${originalPath}`\n  console.log(url);\n  url = url.replace('filters:quality(100)', `filters:quality(100):rotate(${rotation})`);\n  console.log(url);\n  return url\n}\n\nexport function buildLowFiUrl(originalPath, { width, height, aspectRatio }, rotation) {\n  return buildImageUrl(originalPath, {\n    width: (width / 3).toFixed(0),\n    height: (height / 3).toFixed(0),\n    quality: 10\n  }, rotation)\n}\n\nexport default buildImageUrl\n","import getBasicImageProps from './utils/getBasicImageProps'\nimport buildUrl, { buildLowFiUrl } from './utils/buildImageUrl'\nimport { isWebP } from './utils/helpers'\nimport { sizeMultipliersFixed, defaultFixedOptions } from './defaults'\n\nfunction getFixedGatsbyImage(image, args = {}) {\n  let imageProps = getBasicImageProps(image)\n\n  if (!imageProps) {\n    return null\n  }\n\n  let options = {\n    ...defaultFixedOptions,\n    ...args\n  }\n\n  let { width, height, base64, useBase64 } = options\n  let {\n    metadata: { dimensions, lqip },\n    originalPath\n  } = imageProps\n\n  let desiredAspectRatio = dimensions.aspectRatio\n\n  // If we're cropping, calculate the specified aspect ratio\n  if (options.height) {\n    desiredAspectRatio = width / options.height\n  }\n\n  let forceConvert = null\n  if (options.toFormat) {\n    forceConvert = options.toFormat\n  } else if (isWebP(originalPath)) {\n    forceConvert = 'jpg'\n  }\n\n  let widths = sizeMultipliersFixed.map(scale => Math.round(width * scale))\n  let initial = { webp: [], base: [] }\n\n  let srcSets = widths\n    .filter(currentWidth => currentWidth < dimensions.width)\n    .reduce((acc, currentWidth, i) => {\n      let resolution = `${sizeMultipliersFixed[i]}x`\n      let currentHeight = Math.round(currentWidth / desiredAspectRatio)\n\n      let size = {\n        ...options,\n        width: currentWidth,\n        height: currentHeight\n      }\n\n      let webpUrl = buildUrl(originalPath, {\n        ...size,\n        ...{ format: 'webp' }\n      })\n\n      let baseUrl = buildUrl(originalPath, {\n        ...size,\n        ...(forceConvert && { format: forceConvert })\n      })\n\n      acc.webp.push(`${webpUrl} ${resolution}`)\n      acc.base.push(`${baseUrl} ${resolution}`)\n\n      return acc\n    }, initial)\n\n  let outputHeight = Math.round(height ? height : width / desiredAspectRatio)\n\n  let imgSize = {\n    ...options,\n    width: width,\n    height: outputHeight\n  }\n\n  let src = buildUrl(originalPath, {\n    ...imgSize,\n    ...(forceConvert && { format: forceConvert })\n  })\n\n  let srcWebp = buildUrl(originalPath, {\n    ...imgSize,\n    ...{ format: 'webp' }\n  })\n\n  // base64String\n\n  return {\n    base64: buildLowFiUrl(originalPath, { width, height, aspectRatio: desiredAspectRatio }),\n    aspectRatio: desiredAspectRatio,\n    width: Math.round(width),\n    height: outputHeight,\n    src,\n    srcWebp,\n    srcSet: srcSets.base.join(',\\n') || null,\n    srcSetWebp: srcSets.webp.join(',\\n') || null\n  }\n}\n\nexport default getFixedGatsbyImage\n","import getBasicImageProps from './utils/getBasicImageProps'\nimport buildUrl, { buildLowFiUrl } from './utils/buildImageUrl'\nimport { isWebP } from './utils/helpers'\nimport { sizeMultipliersFluid, defaultFluidOptions } from './defaults'\n\nfunction getFluidGatsbyImage(image, args = {}, rotation = 0) {\n  let imageProps = getBasicImageProps(image)\n\n  if (!imageProps) {\n    return null\n  }\n\n  let options = {\n    ...defaultFluidOptions,\n    ...args\n  }\n\n  let { maxWidth, base64, useBase64 } = options\n\n  let {\n    metadata: { dimensions, lqip },\n    originalPath\n  } = imageProps\n\n  let desiredAspectRatio = dimensions.aspectRatio\n\n  // If we're cropping, calculate the specified aspect ratio\n  if (options.maxHeight) {\n    desiredAspectRatio = maxWidth / options.maxHeight\n  }\n\n  let maxHeight = options.maxHeight || Math.round(maxWidth / dimensions.aspectRatio)\n\n  let forceConvert = null\n  if (options.toFormat) {\n    forceConvert = options.toFormat\n  } else if (isWebP(originalPath)) {\n    forceConvert = 'jpg'\n  }\n\n  let sizes = options.sizes || `(max-width: ${maxWidth}px) 100vw, ${maxWidth}px`\n  let widths = sizeMultipliersFluid\n    .map((scale) => Math.round(maxWidth * scale))\n    .filter((width) => width < dimensions.width)\n    .concat(dimensions.width)\n\n  let initial = { webp: [], base: [] }\n  let srcSets = widths\n    .filter((currentWidth) => currentWidth < dimensions.width)\n    .reduce((acc, currentWidth) => {\n      let currentHeight = Math.round(currentWidth / desiredAspectRatio)\n\n      let size = {\n        width: currentWidth,\n        height: currentHeight\n      }\n\n      let webpUrl = buildUrl(originalPath, {\n        ...options,\n        ...size,\n        ...{ format: 'webp' }\n      }, rotation)\n\n      let baseUrl = buildUrl(originalPath, {\n        ...options,\n        ...size,\n        ...{ format: forceConvert }\n      }, rotation)\n\n      acc.webp.push(`${webpUrl} ${currentWidth}w`)\n      acc.base.push(`${baseUrl} ${currentWidth}w`)\n      return acc\n    }, initial)\n\n  let imgSize = { width: maxWidth, height: maxHeight }\n\n  let src = buildUrl(originalPath, {\n    ...options,\n    ...imgSize,\n    ...{ format: forceConvert }\n  }, rotation)\n\n  let srcWebp = buildUrl(originalPath, {\n    ...options,\n    ...imgSize,\n    ...{ format: 'webp' }\n  }, rotation)\n\n  return {\n    base64: buildLowFiUrl(originalPath, { width: maxWidth, height: maxHeight, aspectRatio: desiredAspectRatio }, rotation),\n    aspectRatio: desiredAspectRatio,\n    src,\n    srcWebp,\n    srcSet: srcSets.base.join(',\\n') || null,\n    srcSetWebp: srcSets.webp.join(',\\n') || null,\n    sizes\n  }\n}\n\nexport default getFluidGatsbyImage\n"],"names":["getBasicImageProps","image","lqip","url","base64","validImageUrlPattern","test","originalPath","replace","dimensions","filename","split","width","height","map","num","parseInt","extension","metadata","aspectRatio","defaultOptions","quality","smartCrop","format","fill","toFormat","useBase64","defaultFluidOptions","_extends","maxWidth","maxHeight","defaultFixedOptions","isWebP","isConverted","includes","isOriginal","buildImageUrl","rotation","filters","filter","element","Boolean","length","reduce","acc","currentFilter","i","applyFilters","console","log","buildLowFiUrl","toFixed","args","imageProps","options","desiredAspectRatio","forceConvert","srcSets","sizeMultipliersFixed","scale","Math","round","currentWidth","resolution","currentHeight","webpUrl","buildUrl","size","baseUrl","webp","push","base","imgSize","outputHeight","srcWebp","src","srcSet","join","srcSetWebp","getFluidGatsbyImage","sizes","sizeMultipliersFluid","concat"],"mappings":"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"}