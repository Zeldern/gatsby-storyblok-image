{"version":3,"file":"index.mjs","sources":["../src/utils/getBasicImageProps.js","../src/defaults.js","../src/utils/helpers.js","../src/utils/buildImageUrl.js","../src/getFixedGatsbyImage.js","../src/getFluidGatsbyImage.js"],"sourcesContent":["const validImageUrlPattern = /^(https?:)?\\/\\/a.storyblok.com\\/f\\/*[0-9]+\\/*[0-9]*x*[0-9]*\\/[A-Za-z0-9]+\\/[\\S]+\\.[a-zA-Z]+/\n\nfunction getBasicImageProps(image) {\n  let url = null\n  let lqip = null\n\n  if (typeof image === 'string') {\n    url = image\n  }\n\n  if (typeof image === 'object') {\n    url = image.image\n    lqip = image.base64 ? image.base64 : null\n  }\n\n  url = validImageUrlPattern.test(url) ? url : null\n\n  if (!url) {\n    return false\n  }\n\n  const storyblokRegex = /^(https?:)?\\/\\/a.storyblok.com\\//\n  let originalPath = url.replace(storyblokRegex, '')\n\n  let [, , dimensions, , filename] = originalPath.split('/')\n  let [width, height] = dimensions.split('x').map((num) => parseInt(num, 10))\n  let [, extension] = filename.split('.')\n\n  let aspectRatio = width / height\n  let metadata = { dimensions: { width, height, aspectRatio }, lqip }\n\n  return {\n    originalPath,\n    extension,\n    metadata\n  }\n}\n\nexport default getBasicImageProps","export const DEFAULT_FIXED_WIDTH = 400\nexport const DEFAULT_FLUID_MAX_WIDTH = 800\nexport const STORYBLOK_BASE_URL = 'https://img2.storyblok.com'\n\nexport const sizeMultipliersFixed = [1, 1.5, 2, 3]\nexport const sizeMultipliersFluid = [0.25, 0.5, 1, 1.5, 2, 3]\n\nexport const defaultOptions = {\n  quality: 100,\n  smartCrop: true,\n  format: null,\n  fill: null,\n  toFormat: null,\n  base64: null,\n  useBase64: true\n}\n\nexport const defaultFluidOptions = {\n  ...defaultOptions,\n  maxWidth: DEFAULT_FLUID_MAX_WIDTH,\n  maxHeight: null\n}\n\nexport const defaultFixedOptions = {\n  ...defaultOptions,\n  width: DEFAULT_FIXED_WIDTH,\n  height: null\n}\n","export function applyFilters(filters) {\n  return filters.reduce((acc, currentFilter, i) => {\n    return `${acc}:${currentFilter}`\n  }, '/filters')\n}\n\nexport function isWebP(url) {\n  const isConverted = url.includes('filters:format(webp)')\n  const isOriginal = /[a-f0-9]+-\\d+x\\d+\\.webp/.test(url)\n  return isConverted || isOriginal\n}\n","import { STORYBLOK_BASE_URL } from '../defaults'\nimport { applyFilters } from './helpers'\n\nfunction buildImageUrl(originalPath, image, rotation) {\n  let { width, height, smartCrop, quality, format, fill } = image\n\n  let [, extension] = originalPath.split('.')\n\n  let url = STORYBLOK_BASE_URL\n\n  if (width && height) {\n    url += `/${width}x${height}`\n  }\n\n  if (smartCrop) {\n    url += `/smart`\n  }\n\n  let filters = [\n    ...[quality && `quality(${quality})`],\n    ...[format && format !== extension && `format(${format})`],\n    ...[fill && `fill(${fill})`]\n  ]\n\n  // remove falsy elements\n  filters = filters.filter(element => Boolean(element) === true)\n\n  if (filters.length > 0) {\n    url += applyFilters(filters)\n  }\n\n  // add original path at the end\n  url += `/${originalPath}`\n  console.log(url);\n  url = url.replace('filters:quality(100)', `filters:quality(100):rotate(${rotation})`);\n  console.log(url);\n  return url\n}\n\nexport function buildLowFiUrl(originalPath, { width, height, aspectRatio }, rotation) {\n  return buildImageUrl(originalPath, {\n    width: (width / 3).toFixed(0),\n    height: (height / 3).toFixed(0),\n    quality: 10\n  }, rotation)\n}\n\nexport default buildImageUrl\n","import getBasicImageProps from './utils/getBasicImageProps'\nimport buildUrl, { buildLowFiUrl } from './utils/buildImageUrl'\nimport { isWebP } from './utils/helpers'\nimport { sizeMultipliersFixed, defaultFixedOptions } from './defaults'\n\nfunction getFixedGatsbyImage(image, args = {}) {\n  let imageProps = getBasicImageProps(image)\n\n  if (!imageProps) {\n    return null\n  }\n\n  let options = {\n    ...defaultFixedOptions,\n    ...args\n  }\n\n  let { width, height, base64, useBase64 } = options\n  let {\n    metadata: { dimensions, lqip },\n    originalPath\n  } = imageProps\n\n  let desiredAspectRatio = dimensions.aspectRatio\n\n  // If we're cropping, calculate the specified aspect ratio\n  if (options.height) {\n    desiredAspectRatio = width / options.height\n  }\n\n  let forceConvert = null\n  if (options.toFormat) {\n    forceConvert = options.toFormat\n  } else if (isWebP(originalPath)) {\n    forceConvert = 'jpg'\n  }\n\n  let widths = sizeMultipliersFixed.map(scale => Math.round(width * scale))\n  let initial = { webp: [], base: [] }\n\n  let srcSets = widths\n    .filter(currentWidth => currentWidth < dimensions.width)\n    .reduce((acc, currentWidth, i) => {\n      let resolution = `${sizeMultipliersFixed[i]}x`\n      let currentHeight = Math.round(currentWidth / desiredAspectRatio)\n\n      let size = {\n        ...options,\n        width: currentWidth,\n        height: currentHeight\n      }\n\n      let webpUrl = buildUrl(originalPath, {\n        ...size,\n        ...{ format: 'webp' }\n      })\n\n      let baseUrl = buildUrl(originalPath, {\n        ...size,\n        ...(forceConvert && { format: forceConvert })\n      })\n\n      acc.webp.push(`${webpUrl} ${resolution}`)\n      acc.base.push(`${baseUrl} ${resolution}`)\n\n      return acc\n    }, initial)\n\n  let outputHeight = Math.round(height ? height : width / desiredAspectRatio)\n\n  let imgSize = {\n    ...options,\n    width: width,\n    height: outputHeight\n  }\n\n  let src = buildUrl(originalPath, {\n    ...imgSize,\n    ...(forceConvert && { format: forceConvert })\n  })\n\n  let srcWebp = buildUrl(originalPath, {\n    ...imgSize,\n    ...{ format: 'webp' }\n  })\n\n  // base64String\n\n  return {\n    base64: buildLowFiUrl(originalPath, { width, height, aspectRatio: desiredAspectRatio }),\n    aspectRatio: desiredAspectRatio,\n    width: Math.round(width),\n    height: outputHeight,\n    src,\n    srcWebp,\n    srcSet: srcSets.base.join(',\\n') || null,\n    srcSetWebp: srcSets.webp.join(',\\n') || null\n  }\n}\n\nexport default getFixedGatsbyImage\n","import getBasicImageProps from './utils/getBasicImageProps'\nimport buildUrl, { buildLowFiUrl } from './utils/buildImageUrl'\nimport { isWebP } from './utils/helpers'\nimport { sizeMultipliersFluid, defaultFluidOptions } from './defaults'\n\nfunction getFluidGatsbyImage(image, args = {}, rotation = 0) {\n  let imageProps = getBasicImageProps(image)\n\n  if (!imageProps) {\n    return null\n  }\n\n  let options = {\n    ...defaultFluidOptions,\n    ...args\n  }\n\n  let { maxWidth, base64, useBase64 } = options\n\n  let {\n    metadata: { dimensions, lqip },\n    originalPath\n  } = imageProps\n\n  let desiredAspectRatio = dimensions.aspectRatio\n\n  // If we're cropping, calculate the specified aspect ratio\n  if (options.maxHeight) {\n    desiredAspectRatio = maxWidth / options.maxHeight\n  }\n\n  let maxHeight = options.maxHeight || Math.round(maxWidth / dimensions.aspectRatio)\n\n  let forceConvert = null\n  if (options.toFormat) {\n    forceConvert = options.toFormat\n  } else if (isWebP(originalPath)) {\n    forceConvert = 'jpg'\n  }\n\n  let sizes = options.sizes || `(max-width: ${maxWidth}px) 100vw, ${maxWidth}px`\n  let widths = sizeMultipliersFluid\n    .map((scale) => Math.round(maxWidth * scale))\n    .filter((width) => width < dimensions.width)\n    .concat(dimensions.width)\n\n  let initial = { webp: [], base: [] }\n  let srcSets = widths\n    .filter((currentWidth) => currentWidth < dimensions.width)\n    .reduce((acc, currentWidth) => {\n      let currentHeight = Math.round(currentWidth / desiredAspectRatio)\n\n      let size = {\n        width: currentWidth,\n        height: currentHeight\n      }\n\n      let webpUrl = buildUrl(originalPath, {\n        ...options,\n        ...size,\n        ...{ format: 'webp' }\n      }, rotation)\n\n      let baseUrl = buildUrl(originalPath, {\n        ...options,\n        ...size,\n        ...{ format: forceConvert }\n      }, rotation)\n\n      acc.webp.push(`${webpUrl} ${currentWidth}w`)\n      acc.base.push(`${baseUrl} ${currentWidth}w`)\n      return acc\n    }, initial)\n\n  let imgSize = { width: maxWidth, height: maxHeight }\n\n  let src = buildUrl(originalPath, {\n    ...options,\n    ...imgSize,\n    ...{ format: forceConvert }\n  }, rotation)\n\n  let srcWebp = buildUrl(originalPath, {\n    ...options,\n    ...imgSize,\n    ...{ format: 'webp' }\n  }, rotation)\n\n  return {\n    base64: buildLowFiUrl(originalPath, { width: maxWidth, height: maxHeight, aspectRatio: desiredAspectRatio }, rotation),\n    aspectRatio: desiredAspectRatio,\n    src,\n    srcWebp,\n    srcSet: srcSets.base.join(',\\n') || null,\n    srcSetWebp: srcSets.webp.join(',\\n') || null,\n    sizes\n  }\n}\n\nexport default getFluidGatsbyImage\n"],"names":["validImageUrlPattern","getBasicImageProps","image","url","lqip","base64","test","replace","_originalPath$split","originalPath","split","filename","_dimensions$split$map","map","num","parseInt","width","height","extension","metadata","dimensions","aspectRatio","defaultOptions","quality","smartCrop","format","fill","toFormat","useBase64","defaultFluidOptions","_extends","maxWidth","maxHeight","defaultFixedOptions","isWebP","isConverted","includes","isOriginal","buildImageUrl","rotation","filters","concat","filter","element","Boolean","length","reduce","acc","currentFilter","i","applyFilters","console","log","buildLowFiUrl","_ref","toFixed","getFixedGatsbyImage","args","imageProps","options","desiredAspectRatio","forceConvert","srcSets","sizeMultipliersFixed","scale","Math","round","currentWidth","resolution","currentHeight","size","webpUrl","buildUrl","baseUrl","webp","push","base","outputHeight","imgSize","src","srcWebp","srcSet","join","srcSetWebp","getFluidGatsbyImage","sizes","sizeMultipliersFluid"],"mappings":"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"}